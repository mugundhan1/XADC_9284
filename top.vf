////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : top.vf
// /___/   /\     Timestamp : 01/18/2017 10:34:22
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath F:/xilly_adc_test1/XADC_9284/ipcore_dir -intstyle ise -family virtex5 -verilog F:/xilly_adc_test1/XADC_9284/top.vf -w F:/xilly_adc_test1/XADC_9284/top.sch
//Design Name: top
//Device: virtex5
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module top(dco_n, 
           dco_p, 
           din_n, 
           din_p, 
           fifo_rst, 
           mclk, 
           PCIE_PERST_B_LS, 
           PCIE_REFCLK_N, 
           PCIE_REFCLK_P, 
           PCIE_RX0_N, 
           PCIE_RX0_P, 
           GPIO_LED, 
           locked, 
           PCIE_TX0_N, 
           PCIE_TX0_P, 
           quiesce);

    input dco_n;
    input dco_p;
    input [5:0] din_n;
    input [5:0] din_p;
    input fifo_rst;
    input mclk;
    input PCIE_PERST_B_LS;
    input PCIE_REFCLK_N;
    input PCIE_REFCLK_P;
    input PCIE_RX0_N;
    input PCIE_RX0_P;
   output [3:0] GPIO_LED;
   output locked;
   output PCIE_TX0_N;
   output PCIE_TX0_P;
   output quiesce;
   
   wire pcie_ref_clk;
   wire [15:0] XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire [63:0] XLXN_15;
   wire [31:0] XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_29;
   wire locked_DUMMY;
   
   assign XLXN_9 = 16'h001F;
   assign locked = locked_DUMMY;
   (* IOSTANDARD = "DEFAULT" *) 
   IBUFDS #( .DIFF_TERM("FALSE") ) pcieclk_ibuf (.I(PCIE_REFCLK_P), 
                        .IB(PCIE_REFCLK_N), 
                        .O(pcie_ref_clk));
   capture  XLXI_3 (.dclk(XLXN_11), 
                   .dco(XLXN_10), 
                   .din_n(din_n[5:0]), 
                   .din_p(din_p[5:0]), 
                   .wr_data(XLXN_15[63:0]));
   dcm_top  XLXI_4 (.I_clk_n(dco_n), 
                   .I_clk_p(dco_p), 
                   .I_phase_word(XLXN_9[15:0]), 
                   .I_ref_clk(mclk), 
                   .I_reset(), 
                   .O_clk(XLXN_10), 
                   .O_clkdv(XLXN_11), 
                   .O_ctrl_state(), 
                   .O_dcm_locked(locked_DUMMY), 
                   .O_dcm_psdone(), 
                   .O_dcm_reset(), 
                   .O_freq_mode(), 
                   .O_freq_or(), 
                   .O_freq_word());
   fifo_wrap1  XLXI_7 (.din(XLXN_15[63:0]), 
                      .rd_clk(XLXN_29), 
                      .rd_en(XLXN_17), 
                      .rst(fifo_rst), 
                      .wr_clk(XLXN_11), 
                      .wr_en(locked_DUMMY), 
                      .dout(XLXN_16[31:0]), 
                      .empty(XLXN_18), 
                      .full());
   xillybus  XLXI_8 (.PCIE_PERST_B_LS(PCIE_PERST_B_LS), 
                    .pcie_ref_clk(pcie_ref_clk), 
                    .PCIE_RX0_N(PCIE_RX0_N), 
                    .PCIE_RX0_P(PCIE_RX0_P), 
                    .user_r_mem_8_data(), 
                    .user_r_mem_8_empty(), 
                    .user_r_mem_8_eof(), 
                    .user_r_read_32_data(XLXN_16[31:0]), 
                    .user_r_read_32_empty(XLXN_18), 
                    .user_r_read_32_eof(), 
                    .user_w_mem_8_full(), 
                    .bus_clk(XLXN_29), 
                    .GPIO_LED(GPIO_LED[3:0]), 
                    .PCIE_TX0_N(PCIE_TX0_N), 
                    .PCIE_TX0_P(PCIE_TX0_P), 
                    .quiesce(quiesce), 
                    .user_mem_8_addr(), 
                    .user_mem_8_addr_update(), 
                    .user_r_mem_8_open(), 
                    .user_r_mem_8_rden(), 
                    .user_r_read_32_open(), 
                    .user_r_read_32_rden(XLXN_17), 
                    .user_w_mem_8_data(), 
                    .user_w_mem_8_open(), 
                    .user_w_mem_8_wren());
endmodule
